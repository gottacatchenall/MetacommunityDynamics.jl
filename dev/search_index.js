var documenterSearchIndex = {"docs":
[{"location":"tutorials/quick_start/#Hello-World-in-MetacommunityDynamics.jl","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"","category":"section"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"abstract: Abstract\nThis is meant as a quick tutorial to show a typical workflow using EcologicalDynamics.jl. We will introduce many concepts quite quickly in order to show off the features that make MetacommunityDynamics tick. If it feels like the content is moving fast, that's okay. More detailed explanations of the functionality showcased here will follow in subsequent parts of the 'Getting Started' guide.","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"This document is a quick start to the features in MetacommunityDynamics. Here we will build a model of consumer-resource dynamics on a spatial graph, where the limiting growth rate of the resource is a function of the environmental conditions at each patch.","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"First we'll load the package.","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"using MetacommunityDynamics","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"For this example, we are going to use one of the many models included in the MetacommunityDynamics library. The Rosenzweig-MacArthur model of consumer-resource dynamics. Initially, the Rosenzweig-MacArthur was originally defined as  ","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"fracdRdt = lambda R bigg(1 - fracRKbigg) - fracalpha CR1\n+alpha eta R","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"fracdCdt = beta fracalpha CR1 + alpha eta R - gamma   C","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"where R is the relative biomass of the resource, C is the relative biomass of the consumer, alpha is the attack-rate, eta is the handling type, lambda is the limiting instric growth rate,  beta is the intrinsic infintesimal growth of biomass for the consumer per unit resource, and gamma is the intrinsic death date of consumers. (Note that this is equivalent to a Lotka-Volterra model with a Holling Type-II functional response).","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"By default, in MetacommunityDynamics the RosenzweigMacArthur model is parameterized for two species exhibiting a limit cycle, though it can be used for an arbitrary number of species (See TODO custom parameterization section). ","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"rosen = RosenzweigMacArthur()","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"Here we'll consider the folliwing way in which environmental variation affects the dynamics of this model.","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"At each patch i in the spatial graph, the limiting growth rate of the resource at that patch, lambda_i, is a function of the difference between a given trait for the consumer species x, and a single environmental variable associated with each patch, e_i. ","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"We'll model lambda_i as decreasing like a Gaussian as the distance between e_i and x decreases, e.g. ","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"lambda_i = expbigg(frac-(e_i -x)^2sigma^2bigg)","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"where sigma is a parameter controlling the 'importance' of this trait-environmental matching for consumer growth.","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"We'll first do this by initializing a two-species SpeciesPool","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"sp = SpeciesPool(2)","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"Note that by default, SpeciesPools initialized without provided traits default to a single dimensional trait named :x uniformally distributed on 01. ","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"Next, we'll initialize a spatial graph with 20 patches. Note that when not initialized with environmental variable,SpatialGraph's are initialized with a single environmental varaible :e1, similarly uniformally drawn from 01.","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"sg = SpatialGraph(Coordinates(20), DispersalKernel(max_distance=0.3))\nMetacommunityDynamics.UnicodePlots.heatmap(sg.potential, xlabel=\"Node i\", ylabel=\"Node j\", zlabel=\"ϕᵢⱼ\", width=30)","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"second attempt without ansicolor","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"sg = SpatialGraph(Coordinates(20), DispersalKernel(max_distance=0.3))\nMetacommunityDynamics.UnicodePlots.heatmap(sg.potential, xlabel=\"Node i\", ylabel=\"Node j\", zlabel=\"ϕᵢⱼ\", width=30)","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"Now, we provide a function that encodes our model of the niche as described above. Note that a niche function is expected to take a model, traits, and particular patch's environmental condition, and return the modified the parameters for that particular patch.","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"function niche(model, traits, local_env)\n    θ = paramdict(model)\n    θ[:λ] = [λᵢ > 0 ? λᵢ*exp(-(traits[:x][i] - local_env[:e])^2) : 0 for (i,λᵢ) in enumerate(θ[:λ])]\n    return θ\nend","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"Now, we use the spatialize method to combine our Model, SpatialGraph, SpeciesPool, and niche. Note that niche here is a keyword argument. If not provided, by default spatialize will used identical parameters across all sites. This may be of interested if the goal is understanding the consequences of dispersal absent environmental variation.","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"spatialrm = spatialize(rosen, sg, sp; niche=niche)","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"The final thing we need to run this model is our Diffsion model. Diffusion models are constructed using a few components, first a DispersalKernel. The dispersal kernel describes a relative likeliheed of how far an individual organism is going to disperse. By default, the DispersalKernels are initialized with an exponential dispersal kernel, i.e. the kernel f is given by ","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"f(x alpha) = e^-alpha d_ij","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"where alpha indicates the strength of decay, i.e. for small alpha the organism can disperse far, and vice-versa, and d_ij is the distance between patch i and patch j.  The DispersalKernel also takes an optional max_distance argument, which is the furthest any organism can feasibly disperse, meaning for any d_ij greater than the max_distance, the kernel will be equal to zero. ","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"Finally, we can define our Diffusion model using a base migration probability and the dispersal potential.","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"m = 0.01\ndiff = Diffusion(m, sg)","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"Now, we can finally construct the a Problem using our local dynamics spatialrm model and our diffusion model diff. Initial conditions and timespan can be provided here.","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"prob = problem(spatialrm, diff)","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"and run the model using simulate","category":"page"},{"location":"tutorials/quick_start/","page":"Hello World in  MetacommunityDynamics.jl","title":"Hello World in  MetacommunityDynamics.jl","text":"simulate(prob)","category":"page"},{"location":"tutorials/03_environmental_variation/#Environmental-Variation","page":"Environmental Variation","title":"Environmental Variation","text":"","category":"section"},{"location":"tutorials/03_environmental_variation/","page":"Environmental Variation","title":"Environmental Variation","text":"warning: Warning\nThis is still a work in progress","category":"page"},{"location":"reference/model_index/community/overview/#Community-Dynamics-in-EcoDynamics.jl","page":"Community Dynamics in EcoDynamics.jl","title":"Community Dynamics in EcoDynamics.jl","text":"","category":"section"},{"location":"reference/model_index/community/overview/","page":"Community Dynamics in EcoDynamics.jl","title":"Community Dynamics in EcoDynamics.jl","text":"The dynamics of ecological communities has a rich history. ","category":"page"},{"location":"reference/model_index/community/overview/#Rosenzweig-MacArthur","page":"Community Dynamics in EcoDynamics.jl","title":"Rosenzweig-MacArthur","text":"","category":"section"},{"location":"reference/model_index/community/overview/","page":"Community Dynamics in EcoDynamics.jl","title":"Community Dynamics in EcoDynamics.jl","text":"RosenzweigMacArthur ","category":"page"},{"location":"reference/model_index/community/overview/#Competitive-Lotka-Volterra","page":"Community Dynamics in EcoDynamics.jl","title":"Competitive Lotka-Volterra","text":"","category":"section"},{"location":"reference/model_index/community/overview/","page":"Community Dynamics in EcoDynamics.jl","title":"Community Dynamics in EcoDynamics.jl","text":"CompetitiveLotkaVolterra","category":"page"},{"location":"tutorials/02_consumer_resource/#A-tutorial-on-Consumer-Resource-Modeling","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"","category":"section"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"warning: Warning\nThis is still a work in progress","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"abstract: Abstract\nIn this tutorial, we explore our first multi-species model: Lotka-Volterra dynamics. We'll learn about building consumer-resource models in MetacommunityDynamics, and using included and custom functional responses. ","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"Overview","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"Basic LV\nCustom functional response\nDifferential growth in response to environment \nYodzisInnes and trait models\nMany species models\nPutting it all together","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"First we'll load the package.","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"using MetacommunityDynamics","category":"page"},{"location":"tutorials/02_consumer_resource/#An-introduction-to-Consumer-Resource-models","page":"A tutorial on Consumer-Resource Modeling","title":"An introduction to Consumer-Resource models","text":"","category":"section"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"Lotka-Volterra as a predator-prey model.","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"The unrealistic assuptions of LV. First, primary production should be density dependent. TODO EXAMPLE","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"Second consumption should follow a functional response as a function of resource density. TODO EXAMPLE","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"Why are CR models of interest? Stability of systems. ","category":"page"},{"location":"tutorials/02_consumer_resource/#Lotka-Volterra","page":"A tutorial on Consumer-Resource Modeling","title":"Lotka-Volterra","text":"","category":"section"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"It's included. Just like in previous tutorial we can use the constructor to create an instance of the Lotka-Volterra model:","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"lv = TrophicLotkaVolterra()","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"and convert it to a Problem and simulate, just as we did before","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"prob = problem(lv)\ntraj = simulate(prob)","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"LV and parameterizations. Introduce limit cycles. ","category":"page"},{"location":"tutorials/02_consumer_resource/#What-is-a-functional-response?","page":"A tutorial on Consumer-Resource Modeling","title":"What is a functional response?","text":"","category":"section"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"Here we build a new model with our own customized functional response.","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"How the rate of consumption of consumer C of a resource R depends on the density of the resource. This idea was initially described by Holling (YEAR).","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"The Lotka-Voltera Model has a linear (or also-called Holling Type-I) functional response. Consider the time-derivative of the consumer C:","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"fracdCdt = beta CR - gamma C","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"i.e., for a fixed number of consumers C, the transfer of biomass from resource  to consumer is a linear function of the resource amount R as a  function with slope beta.  ","category":"page"},{"location":"tutorials/02_consumer_resource/","page":"A tutorial on Consumer-Resource Modeling","title":"A tutorial on Consumer-Resource Modeling","text":"This is not realistic. simple example.","category":"page"},{"location":"tutorials/04_occupancy_modeling/#Occupancy-Modeling","page":"Occupancy Modeling","title":"Occupancy Modeling","text":"","category":"section"},{"location":"tutorials/04_occupancy_modeling/","page":"Occupancy Modeling","title":"Occupancy Modeling","text":"warning: Warning\nThis is still a work in progress","category":"page"},{"location":"tutorials/tutorials/#Tutorials","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Running Dynamics","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"The logistic map. \nThe model, Problem, simulate API\nCustomization","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Meant to be a guide to up to the spatialize API, but only consider results up to aggregated across all sites. For differences in sites, see tutorial tbd.  ","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Consumer-Resource Models","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Basic LV\nCustom functional response\nYodzisInnes and trait models\nMany species models\nPutting it all together","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Dispersal ","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Spatial Graphs\nEnvironmental Covariates\nDispersal Kernels and Potentials\nDiffusion","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Adding Stochaticity","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"note refering to reference section on how EcoDynamics treats discrete-time determ/stoch models the same ","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Build up to Gaussian drift to LV many species system on a SG","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Letting the environment influence species interactions ","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Assumes previous tutorials\nstrong env gradient from NL.jl","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Single-species occupancy models\nMulti-species occupancy models","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Simulated niche-space, set up generative model used for inference later ","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Inference","category":"page"},{"location":"tutorials/tutorials/","page":"Tutorials","title":"Tutorials","text":"Bayes integration tutorial  ","category":"page"},{"location":"reference/spatialgraphs/#The-Spatial-Subsystem","page":"The Spatial Subsystem","title":"The Spatial Subsystem","text":"","category":"section"},{"location":"reference/spatialgraphs/","page":"The Spatial Subsystem","title":"The Spatial Subsystem","text":"Modules = [MetacommunityDynamics]\nPages   = [\"diffusion.jl\", \"kernel.jl\", \"potential.jl\", \"spatialize.jl\"]","category":"page"},{"location":"reference/public/#Public-methods","page":"Public methods","title":"Public methods","text":"","category":"section"},{"location":"reference/public/","page":"Public methods","title":"Public methods","text":"","category":"page"},{"location":"reference/model_index/metapopulation/overview/#Metapopulation-Dynamics-in-EcoDynamics.jl","page":"Metapopulation Dynamics in EcoDynamics.jl","title":"Metapopulation Dynamics in EcoDynamics.jl","text":"","category":"section"},{"location":"reference/model_index/metapopulation/overview/","page":"Metapopulation Dynamics in EcoDynamics.jl","title":"Metapopulation Dynamics in EcoDynamics.jl","text":"Metapopulation dynamics refers to the set of theory describing the behavior of occupancy dynamics in a set of patches. ","category":"page"},{"location":"reference/model_index/population/overview/#Population-Dynamics-in-EcoDynamics.jl","page":"Population Dynamics in EcoDynamics.jl","title":"Population Dynamics in EcoDynamics.jl","text":"","category":"section"},{"location":"reference/model_index/population/overview/#Beverton-Holt","page":"Population Dynamics in EcoDynamics.jl","title":"Beverton-Holt","text":"","category":"section"},{"location":"reference/model_index/population/overview/","page":"Population Dynamics in EcoDynamics.jl","title":"Population Dynamics in EcoDynamics.jl","text":"BevertonHolt ","category":"page"},{"location":"reference/model_index/population/overview/#Ricker-Model","page":"Population Dynamics in EcoDynamics.jl","title":"Ricker Model","text":"","category":"section"},{"location":"reference/model_index/population/overview/","page":"Population Dynamics in EcoDynamics.jl","title":"Population Dynamics in EcoDynamics.jl","text":"RickerModel","category":"page"},{"location":"reference/model_index/population/overview/#Ricker-Model-Stochasticity-Types","page":"Population Dynamics in EcoDynamics.jl","title":"Ricker Model Stochasticity Types","text":"","category":"section"},{"location":"reference/model_index/population/overview/","page":"Population Dynamics in EcoDynamics.jl","title":"Population Dynamics in EcoDynamics.jl","text":"[Melbourne2008ExtRis]","category":"page"},{"location":"reference/model_index/population/overview/#Logistic-Model","page":"Population Dynamics in EcoDynamics.jl","title":"Logistic Model","text":"","category":"section"},{"location":"reference/model_index/population/overview/","page":"Population Dynamics in EcoDynamics.jl","title":"Population Dynamics in EcoDynamics.jl","text":"LogisticModel ","category":"page"},{"location":"reference/model_index/population/overview/#Logistic-Map","page":"Population Dynamics in EcoDynamics.jl","title":"Logistic Map","text":"","category":"section"},{"location":"reference/model_index/population/overview/","page":"Population Dynamics in EcoDynamics.jl","title":"Population Dynamics in EcoDynamics.jl","text":"LogisticMap","category":"page"},{"location":"tutorials/01_getting_started/#Getting-started-with-MetacommunityDynamics.jl","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"","category":"section"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"abstract: Abstract\nIn this tutorial, we create and simulate a simple model of community dynamics. We will then build a customized model. Then we'll make it spatial. Then we'll add stochasticity. Then we'll add niche effects. And that'll be the end of this tutorial.","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"In this tutorial, we will learn how to use MetacommunityDynamics.jl from scratch. We'll start by learning how to simulate Lotka-Volterra dynamics, how to adjust model parameters and how to change differential equation solvers. In the secont part, we'll focus on how MetacommunityDynamics.jl enables reaction-diffusion dynamics on spatial graphs, where we'll simulate how dispersal causes an LV system across many patches to become synchronized.","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"Let's start by loading the package. If you have not installed Julia or MetacommunityDynamics, see this [installation guide].","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"using MetacommunityDynamics","category":"page"},{"location":"tutorials/01_getting_started/#A-simple-Lotka-Volterra-Model","page":"Getting started with MetacommunityDynamics.jl","title":"A simple Lotka-Volterra Model","text":"","category":"section"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"MetacommunityDynamics.jl includes a library of many common models for population and community dynamics. ","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"lv = TrophicLotkaVolterra()","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"prob = problem(lv)","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"traj = simulate(prob);\nmakieplot(traj)","category":"page"},{"location":"tutorials/01_getting_started/#Changing-parameters","page":"Getting started with MetacommunityDynamics.jl","title":"Changing parameters","text":"","category":"section"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"foo","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"lv_custom_params = TrophicLotkaVolterra(λ = 0.1, γ = 0.3)\ntraj = simulate(problem(lv_custom_params))\nmakieplot(traj)","category":"page"},{"location":"tutorials/01_getting_started/#Changing-the-simulation-length","page":"Getting started with MetacommunityDynamics.jl","title":"Changing the simulation length","text":"","category":"section"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"foo","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"prob = problem(lv, tspan=(1,200))\nmakieplot(simulate(prob))","category":"page"},{"location":"tutorials/01_getting_started/#Changing-the-initial-condition","page":"Getting started with MetacommunityDynamics.jl","title":"Changing the initial condition","text":"","category":"section"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"foo","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"prob = problem(lv, u0 = [0.5, 0.5])\nmakieplot(simulate(prob))","category":"page"},{"location":"tutorials/01_getting_started/#Using-a-custom-differential-equation-solver","page":"Getting started with MetacommunityDynamics.jl","title":"Using a custom differential-equation solver","text":"","category":"section"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"bar","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"using DifferentialEquations\nprob = problem(lv)\nmakieplot(simulate(prob, solver=Vern7()))","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"foo","category":"page"},{"location":"tutorials/01_getting_started/#Making-our-model-spatial","page":"Getting started with MetacommunityDynamics.jl","title":"Making our model spatial","text":"","category":"section"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"coords = Coordinates(20);\nmakieplot(coords)","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"foo","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"kern = DispersalKernel(decay=3., max_distance=1.5);\nmakieplot(kern)","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"bar","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"sg = SpatialGraph(coords, kern);\nmakieplot(sg)","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"foobar","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"spatial_lv = spatialize(lv, sg, SpeciesPool(2));","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"very low migration","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"diffusion = Diffusion(sg, 0.001)","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"foobarbaz","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"spatial_prob = problem(spatial_lv, diffusion; \n    u0=rand(2,numsites(sg)),\n    tspan=(1,300)\n);","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"foo","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"t = simulate(spatial_prob)\nmakieplot(t)","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"biz","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"Very high migration","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"diffusion = Diffusion(sg, 0.1)\n\nspatial_prob = problem(spatial_lv, diffusion; \n    u0=rand(2,numsites(sg)),\n    tspan=(1,300)\n);\n\nt = simulate(spatial_prob)\nmakieplot(t)","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"Notice the difference in synchrony","category":"page"},{"location":"tutorials/01_getting_started/#Species-specific-dispersal","page":"Getting started with MetacommunityDynamics.jl","title":"Species specific dispersal","text":"","category":"section"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"diffusion_vec = [Diffusion(sg, 0.1), Diffusion(sg, 0.01)]\n\nspatial_prob = problem(spatial_lv, diffusion_vec; \n    u0=rand(2,numsites(sg)),\n    tspan=(1,300)\n);\n\nt = simulate(spatial_prob)\nmakieplot(t)","category":"page"},{"location":"tutorials/01_getting_started/#Demographic-stochasticity","page":"Getting started with MetacommunityDynamics.jl","title":"Demographic stochasticity","text":"","category":"section"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"something in the vector of diffusions + stochastic constructor is broken.","category":"page"},{"location":"tutorials/01_getting_started/","page":"Getting started with MetacommunityDynamics.jl","title":"Getting started with MetacommunityDynamics.jl","text":"spatial_prob = problem(spatial_lv, diffusion_vec, GaussianDrift(0.05); \n    tspan=(1,300)\n);","category":"page"},{"location":"tutorials/01_getting_started/#Local-environmental-variation-and-niche-effects","page":"Getting started with MetacommunityDynamics.jl","title":"Local environmental variation and niche effects","text":"","category":"section"},{"location":"reference/internal/#Documentation-for-internal-methods","page":"Documentation for internal methods","title":"Documentation for internal methods","text":"","category":"section"},{"location":"reference/internal/","page":"Documentation for internal methods","title":"Documentation for internal methods","text":"Modules = [MetacommunityDynamics]","category":"page"},{"location":"reference/internal/#MetacommunityDynamics.BevertonHolt","page":"Documentation for internal methods","title":"MetacommunityDynamics.BevertonHolt","text":"BevertonHolt{S} <: Model{Population,Biomass,S,Discrete}\n\nThe Beverton-Holt model is a discrete-time, deterministic model of population dynamics. It is commonly interpreted as a discrete-time version of the logistic model.\n\nIt is described by \n\nN_t+1 =fracR_0 MN_t + MN_t\n\nwhere K = (R_0 - 1)M is the carrying capacity.\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.CompetitiveLotkaVolterra","page":"Documentation for internal methods","title":"MetacommunityDynamics.CompetitiveLotkaVolterra","text":"CompetitiveLotkaVolterra{S} <: Model{Community,Biomass,S,Continuous}\n\nCompetitive Lotka-Voterra.\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.Coordinates","page":"Documentation for internal methods","title":"MetacommunityDynamics.Coordinates","text":"Coordinates{T <: Number}\n\nA Coordinates consists of a set of nodes with coordinates and associated environmental variables for each site.  \n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.Coordinates-Tuple{E} where E<:EnvironmentLayer","page":"Documentation for internal methods","title":"MetacommunityDynamics.Coordinates","text":"Coordinates(layer::E; coords = [(rand(), rand()) for _ = 1:20]) where E<:EnvironmentLayer\n\nBuilds a Coordinates where the environmental variable is built from a single EnvironmentLayer, and optionally the set of coordinates can be passed as a keyword argument.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.Coordinates-Tuple{Integer}","page":"Documentation for internal methods","title":"MetacommunityDynamics.Coordinates","text":"Coordinates(n::Integer)\n\nBuilds a coordinate set with n nodes in it.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.Coordinates-Tuple{}","page":"Documentation for internal methods","title":"MetacommunityDynamics.Coordinates","text":"Coordinates(; coords = nothing, env = nothing)\n\nBuilds a Coordinates, where both the coordinates and the environmental variables can be passed as keyword arguments. The environment should be a dictionary where (key,value) pairs are names of each environmnetal variable and vectors of that variable across each node in the Coordinates.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.Coordinates-Union{Tuple{Dict{S, Vector{T}}}, Tuple{T}, Tuple{S}} where {S<:Union{String, Symbol}, T}","page":"Documentation for internal methods","title":"MetacommunityDynamics.Coordinates","text":"Coordinates(env::Dict{S,Vector})\n\nBuilds a coordinate set for a given environment matrix. The environmental matrix should be a matrix where each column is the vector of environmental variables for each node.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.Coordinates-Union{Tuple{Vector{E}}, Tuple{E}} where E<:EnvironmentLayer","page":"Documentation for internal methods","title":"MetacommunityDynamics.Coordinates","text":"Coordinates(layers::Vector{E}; coords = [(rand(), rand()) for _ = 1:20]) where E<:EnvironmentLayer\n\nBuilds a coordinate set with environmental variables passed as a vector of EnvironmentLayers, and optionally coordinates passed as a keyword argument. \n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.Coordinates-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Tuple","page":"Documentation for internal methods","title":"MetacommunityDynamics.Coordinates","text":"Coordinates(coords::Vector{T}) where T<:Tuple\n\nConstructs a Coordinates from a set of coordinates coords, which is a vector of (x,y) pairs. Builds a random environment variable named :x.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.Discreteness","page":"Documentation for internal methods","title":"MetacommunityDynamics.Discreteness","text":"Discreteness\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.EnvironmentLayer","page":"Documentation for internal methods","title":"MetacommunityDynamics.EnvironmentLayer","text":"EnvironmentLayer{T}\n\nAn EnvironmentalLayer stores a raster representation of a single environmental variable inside a matrix.\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.EnvironmentLayer-Tuple{}","page":"Documentation for internal methods","title":"MetacommunityDynamics.EnvironmentLayer","text":"EnvironmentLayer(; generator = MidpointDisplacement(0.7), sz=(50,50))\n\nBuilds an EnvironmentalLayer with a NeutralLandscapes generator\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.LogisticMap","page":"Documentation for internal methods","title":"MetacommunityDynamics.LogisticMap","text":"LogisticMap{S} <: Model{Population,Biomass,S,Continuous}\n\nLogistic Map. \n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.LogisticModel","page":"Documentation for internal methods","title":"MetacommunityDynamics.LogisticModel","text":"LogisticModel{S} <: Model{Population,Biomass,S,Continuous}\n\nLogistic Model. \n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.Measurement","page":"Documentation for internal methods","title":"MetacommunityDynamics.Measurement","text":"Measurement\n\nThe Measurement abstract type is a supertype for the different types of measurements a model describes, primarily [Biomass]: a continuous value representing relative amount of mass per species, [Abundance]: an integer valued count of individuals, and [Occupancy]: a binary value of whether is species is present at a location at a given time. \n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.Model","page":"Documentation for internal methods","title":"MetacommunityDynamics.Model","text":"Model{SC<:Scale,M<:Measurement,SP<:Spatialness,D<:Discreteness}\n\nThe abstract type from all models in MetacommunityDynamics. All Model's are parametric types that stores four parameters that describe the model: [Scale], [Measurement], [Spatialness], and [Discreteness]. \n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.Parameter","page":"Documentation for internal methods","title":"MetacommunityDynamics.Parameter","text":"Parameter{T,N}\n\nYet-another Parameter struct. \n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.Population","page":"Documentation for internal methods","title":"MetacommunityDynamics.Population","text":"Population\n\nThe population scale refers to models that describe the population dynamics of a single species at a single local location.\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.RickerModel","page":"Documentation for internal methods","title":"MetacommunityDynamics.RickerModel","text":"RickerModel\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.RickerStochasticityType","page":"Documentation for internal methods","title":"MetacommunityDynamics.RickerStochasticityType","text":"RickerStochasticityType\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.RosenzweigMacArthur","page":"Documentation for internal methods","title":"MetacommunityDynamics.RosenzweigMacArthur","text":"struct RosenzweigMacArthur{S<:Spatialness} <: Model{Community,Biomass,S,Continuous}\n\nDynamics given by\n\nfracdRdt = lambda R bigg(1 - fracRKbigg) - fracalpha CR1 +alpha eta R\n\nfracdCdt = beta fracalpha CR1 + alpha eta R - gamma   C\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.Scale","page":"Documentation for internal methods","title":"MetacommunityDynamics.Scale","text":"Scale\n\nAbstract type that is a supertype for all model scales: [Population], [Metapopulation], [Community], and [Metacommunity]. A model's scale is what it was orginally defined as. For example, [TrophicLotkaVolterra] is a [Community] model, regardless of whether is has been convert to run on a spatial-graph via [spatialize].\n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.SpeciesPool","page":"Documentation for internal methods","title":"MetacommunityDynamics.SpeciesPool","text":"SpeciesPool{T<:Number}\n\nA SpeciesPool consists of a set of species and their corresponding traits. \n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#MetacommunityDynamics.Trajectory","page":"Documentation for internal methods","title":"MetacommunityDynamics.Trajectory","text":"Trajectory{S<:SciMLBase.AbstractTimeseriesSolution}\n\nA trajectory is a single output for a Problem.  \n\n\n\n\n\n","category":"type"},{"location":"reference/internal/#Base.size-Tuple{Coordinates}","page":"Documentation for internal methods","title":"Base.size","text":"Base.size(coords::Coordinates)\n\nReturns the number of nodes in a coordinate set coords.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics._env_from_layer-Tuple{Any, EnvironmentLayer}","page":"Documentation for internal methods","title":"MetacommunityDynamics._env_from_layer","text":"_env_from_layer(coords, layer::EnvironmentLayer)\n\nReturns the values in the layer at the given coordinates, given the bounding-box os the coordinates is the extent of the layer.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.distance_matrix-Tuple{Coordinates}","page":"Documentation for internal methods","title":"MetacommunityDynamics.distance_matrix","text":"distance_matrix(coords::Coordinates; distance = Euclidean())\n\nReturns a matrix of pairwise distances for all nodes in a Coordinates. The argument passed to distance must be of type Distance from Distances.jl.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.envdims-Tuple{Coordinates}","page":"Documentation for internal methods","title":"MetacommunityDynamics.envdims","text":"envdims(coords::Coordinates)\n\nReturns the dimensionality of the environmental variable associated with each node in a Coordinates coords.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.environment-Tuple{Coordinates}","page":"Documentation for internal methods","title":"MetacommunityDynamics.environment","text":"environment(coords::Coordinates)\n\nReturns the dictionary of environmental variables of a Coordinates coords\n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.numsites-Tuple{Coordinates}","page":"Documentation for internal methods","title":"MetacommunityDynamics.numsites","text":"numsites(coords::Coordinates)\n\nReturns the number of nodes in a Coordinates coords. \n\n\n\n\n\n","category":"method"},{"location":"reference/internal/#MetacommunityDynamics.∂u-Tuple{BevertonHolt, Any, Any}","page":"Documentation for internal methods","title":"MetacommunityDynamics.∂u","text":"∂u(bm::BevertonHolt, x)\n\nSingle time-step for the BevertonHolt model. \n\n\n\n\n\n","category":"method"},{"location":"bibliography/#References","page":"References","title":"References","text":"","category":"section"},{"location":"bibliography/","page":"References","title":"References","text":"","category":"page"},{"location":"#MetacommunityDynamics.jl","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"","category":"section"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"MetacommunityDynamics.jl is a package for simulation of ecosystem processes, specifically population and community dynamics on spatial graphs, written in the Julia language. ","category":"page"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"info: Info\nNote that MetacommunityDynamics.jl is still under development, and although the API is not expected to change a ton, we still do not yet guarantee it will remain constant until the first v1.0 production release. ","category":"page"},{"location":"#Installation","page":"MetacommunityDynamics.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"If you need to install Julia, you can do so using the juliaup installation manager with instructions found here. ","category":"page"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"From within Julia, you can install the release with ","category":"page"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"using Pkg\nPkg.add(\"MetacommunityDynamics\")","category":"page"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"Or from the REPL Pkg mode, you can use","category":"page"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"pkg> add MetacommunityDynamics","category":"page"},{"location":"#Background-and-Motivation","page":"MetacommunityDynamics.jl","title":"Background and Motivation","text":"","category":"section"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"so this should justify the major elements that must be includeable in simulation ","category":"page"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"","category":"page"},{"location":"#Documentation-Structure","page":"MetacommunityDynamics.jl","title":"Documentation Structure","text":"","category":"section"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"This documentation is structured loosely using the Diátaxis format, which separates documentation into four forms:","category":"page"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"Tutorials (a learning-oriented guided exploration of the software)\nHow-to Guides (a goal-oriented set of directions to accomplish something specific)\nReference (information-oriented \"techinical descriptions of the machinery\")\nExplanation (understanding-oriented discussions on the software design)","category":"page"},{"location":"#Tutorials","page":"MetacommunityDynamics.jl","title":"🐛 Tutorials","text":"","category":"section"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"Getting started with MetacommunityDynamics.jl\n","category":"page"},{"location":"#How-to-Guides","page":"MetacommunityDynamics.jl","title":"🦋 How-to Guides","text":"","category":"section"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"","category":"page"},{"location":"#Reference","page":"MetacommunityDynamics.jl","title":"📚 Reference","text":"","category":"section"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"Model Index\nPopulation Models\nMetapopulation Models\nCommunity Models\nMetacommunity Models","category":"page"},{"location":"#Explanation","page":"MetacommunityDynamics.jl","title":"🧪 Explanation","text":"","category":"section"},{"location":"","page":"MetacommunityDynamics.jl","title":"MetacommunityDynamics.jl","text":"Model Design","category":"page"},{"location":"explanation/design/#The-design-of-MetacommunityDynamics.jl","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"","category":"section"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"This document is for advanced users interested in contributing new models or building complicated custom models in MetacommunityDynamics.jl.","category":"page"},{"location":"explanation/design/#The-type-system","page":"The design of MetacommunityDynamics.jl","title":"The type system","text":"","category":"section"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"While MetacommunityDynamics enables simulation of dynamics in a single place (locally), its main goal is to enable reaction-diffusion models on spatial graphs. Similarly, although MetacommunityDynamics is perfectly adaquete for simulating the dynamics of single-species systems, the core design goals are motivated by an interest in simulating communities on spatial graphs, where environmental variation across each patch/node in the graph influences the dynamics at that node/patch, with a particular emphasis on understanding how different parameterizations of models causes regime shifts in resulting species  compositions across space, across different levels of neutral, niche, and dispersal proccesses.","category":"page"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"What are the essential things you need to build a simulation model that meets this criteria?","category":"page"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"We need a way to represent different types of models (e.g. Lotka-Volterra, Rosenzweig-MacArthur, etc). \nA spatial graph, consisting of a set of nodes/patches connected by dispersal, that also can represent environmental information associated with each patch. \nA species pool with traits, which are an arbitrary set of named values that correspond to each species in the species pool.  \nThe niche, where the combination of the local (named!) environmental conditions at a patch and other species present shifts the parameters of the dynamics at that patch.\nA model of diffusion. We take a dispersal kernel and normalize its value across each (source->target) pair of patches to create a dispersal potential, which is a distribution for each (source->target pair).","category":"page"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"Note that all are interconnected and must interface with one another to achieve our overall goal:","category":"page"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"the model's parameters must match species pool size and number of spatial sites  (1->2, 1->3)\nthe spatial graph must provide environmental data for the niche (2 -> 4)\nthe species pool must provide traits for the niche (3->4)\nthe niche must provide parameters for the spatial version of the model based on the species pool and (spatial graph w/ environment) (2->1, 4->1)\nboth the species and environment must provide named parameters to the niche (2->4,3->4)","category":"page"},{"location":"explanation/design/#Models","page":"The design of MetacommunityDynamics.jl","title":"Models","text":"","category":"section"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"The first element of the type system is distinguishing different properties of different Models. In EcoDynamics.jl, Model is the abstract type under which all concrete model definitions are subtyped. Specifically, Model is defined as a parameteric abstract type where stores information about the important meta-properties about models. ","category":"page"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"abstract type Model{SC<:Scale,M<:Measurement,SP<:Spatialness,D<:Discreteness} end ","category":"page"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"Specifically there are four different important properties which Model stores (in Julia development, this design pattern is called using 'traits', although we refrain from using that terminology in this documentation to avoid confusion with Traits as the type of information that describes properties about species).","category":"page"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"These four properties are Scale, Measurement, Spatialness, and Discreteness. Each of these are defined as abstract types, and the different values they can take on are defined as abstract types that are subtypes of the category they correspond to.","category":"page"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"Scale refers to the organizational scale a model is originally designed, with the options being Population, Community, Metapopulation, and Metacommunity. Note that a model being at the Population or Community scale doesn't preclude it from being turned into reaction-diffusion models on spatial graphs, however Metapopulation and Metacommunity models are such that they have no corresponding local version (think Hanksi's metapopulation model).  \nMeasurement refers to the type of information that is changing over time in a given model. There options here are (1) Occupancy, which indicates binary presence/absence state, (2) Abundance, where each state is a non-negative integer representing the count of individuals and (3) Biomass, where each state is a non-negative real number indicating some relative measure of biomass.  \nDiscreteness refers to whether a model is defined in Continuous or Discrete time.\nSpatialness refers to whether a constructed model is only occuring at a single location (Local), or whether the model is constructed across a spatial graph (Spatial). This type-parameter is distinct because it can change. The method spatialize transforms a Local model into spatial models. ","category":"page"},{"location":"explanation/design/#Spatial-graphs","page":"The design of MetacommunityDynamics.jl","title":"Spatial graphs","text":"","category":"section"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"The SpatialGraph type contains information about the coordinates of each patch/node, as well as environmental covariates at each site. Environmental covariates are stored in a dictionary where the key is the name of the variable, and the value is a vector of values corresponds to each node in the spatial graph. ","category":"page"},{"location":"explanation/design/#Species-Pool","page":"The design of MetacommunityDynamics.jl","title":"Species Pool","text":"","category":"section"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"The SpeciesPool type contains a list of species names (as Strings or Symbols), and more importantly a dictionary of named trait values. The trait values are important as they are one of two inputs to a Niche, which enables variation in model parameters across space as a function of  enviornmental conditions.","category":"page"},{"location":"explanation/design/#Niches","page":"The design of MetacommunityDynamics.jl","title":"Niches","text":"","category":"section"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"Provide a default niche function for each model, but enable it to be written custom. This enables environment-contigent interaction strengths, etc. \nGenerally, the default niche will modify the growth rates in a model by a a function of the distance between a single dimensional environmental variable and a species trait, e.g. adjusting R_0 in the SIR model  ","category":"page"},{"location":"explanation/design/#Dispatch-patterns","page":"The design of MetacommunityDynamics.jl","title":"Dispatch patterns","text":"","category":"section"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"What is the lifespan of building and running a model?\nMaybe there is a figure for the paper here, flowchart of what is the next method you run based on what you are trying to do?","category":"page"},{"location":"explanation/design/#QA-Methods-for-Included-Models","page":"The design of MetacommunityDynamics.jl","title":"QA Methods for Included Models","text":"","category":"section"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"One main design goal of MetacommunityDynamics.jl is to ensure it is as easy as possible to write customs models. \"Easy\", in this sense, means both involving writing the fewest lines of code possible, and not requiring a deep understanding of Julia or its type system. ","category":"page"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"This means that the instructions on how to add custom models (see TBD docs section) doesn't include some of the extra methods added to included models to avoid possible mistakes. e.g.:","category":"page"},{"location":"explanation/design/","page":"The design of MetacommunityDynamics.jl","title":"The design of MetacommunityDynamics.jl","text":"Warnings about parameter values that are extreme or nonsensical (providing an intrinsic growth rate to a predator in a LV model, say)\nWarnings about whether a niche function leads toward \"crucial\" parameters going to 0/unreasonable values at most sites depending on the range of environmnetal variables provided in the SpatialGraph","category":"page"}]
}
