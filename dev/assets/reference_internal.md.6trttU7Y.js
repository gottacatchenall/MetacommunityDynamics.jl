import{_ as d,C as Q,c as o,o as r,j as s,a as n,aA as i,G as e,w as l}from"./chunks/framework.Ce1246Qc.js";const i2=JSON.parse('{"title":"Documentation for internal methods","description":"","frontmatter":{},"headers":[],"relativePath":"reference/internal.md","filePath":"reference/internal.md","lastUpdated":null}'),p={name:"reference/internal.md"},T={class:"jldocstring custom-block",open:""},m={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},h={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-1.033ex"},xmlns:"http://www.w3.org/2000/svg",width:"15.973ex",height:"3.16ex",role:"img",focusable:"false",viewBox:"0 -940 7060.1 1396.6","aria-hidden":"true"},c={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},u={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"17.043ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 7533 1000","aria-hidden":"true"},k={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},B={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},P={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-2.148ex"},xmlns:"http://www.w3.org/2000/svg",width:"27.579ex",height:"5.428ex",role:"img",focusable:"false",viewBox:"0 -1449.5 12189.8 2399","aria-hidden":"true"},Z={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},I={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-1.126ex"},xmlns:"http://www.w3.org/2000/svg",width:"19.128ex",height:"3.145ex",role:"img",focusable:"false",viewBox:"0 -892.5 8454.5 1390.2","aria-hidden":"true"},R={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},z={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},$={class:"jldocstring custom-block",open:""},X={class:"jldocstring custom-block",open:""},K={class:"jldocstring custom-block",open:""};function Y(q,t,W,t2,s2,a2){const a=Q("Badge");return r(),o("div",null,[t[134]||(t[134]=s("h1",{id:"Documentation-for-internal-methods",tabindex:"-1"},[n("Documentation for internal methods "),s("a",{class:"header-anchor",href:"#Documentation-for-internal-methods","aria-label":'Permalink to "Documentation for internal methods {#Documentation-for-internal-methods}"'},"â€‹")],-1)),s("details",T,[s("summary",null,[t[0]||(t[0]=s("a",{id:"MetacommunityDynamics.BevertonHolt",href:"#MetacommunityDynamics.BevertonHolt"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.BevertonHolt")],-1)),t[1]||(t[1]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[9]||(t[9]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BevertonHolt{S} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Model{Population,Biomass,S,Discrete}</span></span></code></pre></div><p>The <a href="https://en.wikipedia.org/wiki/Beverton%E2%80%93Holt_model" target="_blank" rel="noreferrer">Beverton-Holt model</a> is a discrete-time, deterministic model of population dynamics. It is commonly interpreted as a discrete-time version of the logistic model.</p><p>It is described by</p>',3)),s("p",null,[s("mjx-container",m,[(r(),o("svg",h,t[2]||(t[2]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(836,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1139,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(2322.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mfrac" transform="translate(3378.5,0)"><g data-mml-node="mrow" transform="translate(475.9,457.1) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(792,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(1195.6,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(836,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(1141.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1919.3,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z" style="stroke-width:3;"></path></g></g><rect width="2300.3" height="60" x="120" y="220"></rect></g><g data-mml-node="msub" transform="translate(5918.8,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(836,-150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),t[3]||(t[3]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"N"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"t"),s("mo",null,"+"),s("mn",null,"1")])]),s("mo",null,"="),s("mfrac",null,[s("mrow",null,[s("msub",null,[s("mi",null,"R"),s("mn",null,"0")]),s("mi",null,"M")]),s("mrow",null,[s("msub",null,[s("mi",null,"N"),s("mi",null,"t")]),s("mo",null,"+"),s("mi",null,"M")])]),s("msub",null,[s("mi",null,"N"),s("mi",null,"t")])])],-1))])]),s("p",null,[t[6]||(t[6]=n("where ")),s("mjx-container",c,[(r(),o("svg",u,t[4]||(t[4]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1166.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2222.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2611.6,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3370.6,0)"><path data-c="5F" d="M0 -62V-25H499V-62H0Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(3870.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(4592.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(5593,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(6093,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6482,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[5]||(t[5]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"K"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mi",null,"R"),s("mi",{mathvariant:"normal"},"_"),s("mn",null,"0"),s("mo",null,"âˆ’"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mi",null,"M")])],-1))]),t[7]||(t[7]=n(" is the carrying capacity."))]),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[8]||(t[8]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/models/bevertonholt.jl#L1-L15",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",k,[s("summary",null,[t[10]||(t[10]=s("a",{id:"MetacommunityDynamics.CompetitiveLotkaVolterra",href:"#MetacommunityDynamics.CompetitiveLotkaVolterra"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.CompetitiveLotkaVolterra")],-1)),t[11]||(t[11]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[13]||(t[13]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompetitiveLotkaVolterra{S} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Model{Community,Biomass,S,Continuous}</span></span></code></pre></div><p>Competitive Lotka-Voterra.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[12]||(t[12]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/models/lvcompetition.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",y,[s("summary",null,[t[14]||(t[14]=s("a",{id:"MetacommunityDynamics.Coordinates",href:"#MetacommunityDynamics.Coordinates"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Coordinates")],-1)),t[15]||(t[15]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[17]||(t[17]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Coordinates{T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>A <code>Coordinates</code> consists of a set of nodes with coordinates and associated environmental variables for each site.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[16]||(t[16]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L2-L7",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",g,[s("summary",null,[t[18]||(t[18]=s("a",{id:"MetacommunityDynamics.Coordinates-Tuple{E} where E<:EnvironmentLayer",href:"#MetacommunityDynamics.Coordinates-Tuple{E} where E<:EnvironmentLayer"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Coordinates")],-1)),t[19]||(t[19]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[21]||(t[21]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(layer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; coords </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EnvironmentLayer</span></span></code></pre></div><p>Builds a <code>Coordinates</code> where the environmental variable is built from a single EnvironmentLayer, and optionally the set of coordinates can be passed as a keyword argument.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[20]||(t[20]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L93-L99",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",b,[s("summary",null,[t[22]||(t[22]=s("a",{id:"MetacommunityDynamics.Coordinates-Tuple{Integer}",href:"#MetacommunityDynamics.Coordinates-Tuple{Integer}"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Coordinates")],-1)),t[23]||(t[23]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[25]||(t[25]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Builds a coordinate set with <code>n</code> nodes in it.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[24]||(t[24]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L126-L130",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",f,[s("summary",null,[t[26]||(t[26]=s("a",{id:"MetacommunityDynamics.Coordinates-Tuple{}",href:"#MetacommunityDynamics.Coordinates-Tuple{}"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Coordinates")],-1)),t[27]||(t[27]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[29]||(t[29]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; coords </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, env </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Builds a <code>Coordinates</code>, where both the coordinates and the environmental variables can be passed as keyword arguments. The environment should be a dictionary where (key,value) pairs are names of each environmnetal variable and vectors of that variable across each node in the <code>Coordinates</code>.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[28]||(t[28]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L104-L111",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",E,[s("summary",null,[t[30]||(t[30]=s("a",{id:"MetacommunityDynamics.Coordinates-Union{Tuple{Dict{S, Vector{T}}}, Tuple{T}, Tuple{S}} where {S<:Union{String, Symbol}, T}",href:"#MetacommunityDynamics.Coordinates-Union{Tuple{Dict{S, Vector{T}}}, Tuple{T}, Tuple{S}} where {S<:Union{String, Symbol}, T}"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Coordinates")],-1)),t[31]||(t[31]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[33]||(t[33]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict{S,Vector}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Builds a coordinate set for a given environment matrix. The environmental matrix should be a matrix where each column is the vector of environmental variables for each node.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[32]||(t[32]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L136-L141",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",C,[s("summary",null,[t[34]||(t[34]=s("a",{id:"MetacommunityDynamics.Coordinates-Union{Tuple{Vector{E}}, Tuple{E}} where E<:EnvironmentLayer",href:"#MetacommunityDynamics.Coordinates-Union{Tuple{Vector{E}}, Tuple{E}} where E<:EnvironmentLayer"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Coordinates")],-1)),t[35]||(t[35]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[37]||(t[37]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(layers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{E}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; coords </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EnvironmentLayer</span></span></code></pre></div><p>Builds a coordinate set with environmental variables passed as a vector of EnvironmentLayers, and optionally coordinates passed as a keyword argument.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[36]||(t[36]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L83-L88",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",_,[s("summary",null,[t[38]||(t[38]=s("a",{id:"MetacommunityDynamics.Coordinates-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Tuple",href:"#MetacommunityDynamics.Coordinates-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Tuple"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Coordinates")],-1)),t[39]||(t[39]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[41]||(t[41]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coords</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span></span></code></pre></div><p>Constructs a <code>Coordinates</code> from a set of coordinates <code>coords</code>, which is a vector of (x,y) pairs. Builds a random environment variable named :x.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[40]||(t[40]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L146-L151",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",j,[s("summary",null,[t[42]||(t[42]=s("a",{id:"MetacommunityDynamics.Discreteness",href:"#MetacommunityDynamics.Discreteness"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Discreteness")],-1)),t[43]||(t[43]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[45]||(t[45]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Discreteness</span></span></code></pre></div>',1)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[44]||(t[44]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/types.jl#L37-L39",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",M,[s("summary",null,[t[46]||(t[46]=s("a",{id:"MetacommunityDynamics.EnvironmentLayer",href:"#MetacommunityDynamics.EnvironmentLayer"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.EnvironmentLayer")],-1)),t[47]||(t[47]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[49]||(t[49]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EnvironmentLayer{T}</span></span></code></pre></div><p>An <code>EnvironmentalLayer</code> stores a raster representation of a single environmental variable inside a matrix.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[48]||(t[48]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/environment.jl#L2-L7",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",v,[s("summary",null,[t[50]||(t[50]=s("a",{id:"MetacommunityDynamics.EnvironmentLayer-Tuple{}",href:"#MetacommunityDynamics.EnvironmentLayer-Tuple{}"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.EnvironmentLayer")],-1)),t[51]||(t[51]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[53]||(t[53]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EnvironmentLayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; generator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MidpointDisplacement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), sz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>Builds an <code>EnvironmentalLayer</code> with a <code>NeutralLandscapes</code> generator</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[52]||(t[52]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/environment.jl#L12-L16",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",D,[s("summary",null,[t[54]||(t[54]=s("a",{id:"MetacommunityDynamics.LogisticMap",href:"#MetacommunityDynamics.LogisticMap"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.LogisticMap")],-1)),t[55]||(t[55]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[57]||(t[57]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LogisticMap{S} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Model{Population,Biomass,S,Continuous}</span></span></code></pre></div><p>Logistic Map.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[56]||(t[56]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/models/logistic_map.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",L,[s("summary",null,[t[58]||(t[58]=s("a",{id:"MetacommunityDynamics.LogisticModel",href:"#MetacommunityDynamics.LogisticModel"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.LogisticModel")],-1)),t[59]||(t[59]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[61]||(t[61]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LogisticModel{S} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Model{Population,Biomass,S,Continuous}</span></span></code></pre></div><p>Logistic Model.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[60]||(t[60]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/models/logistic_model.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",H,[s("summary",null,[t[62]||(t[62]=s("a",{id:"MetacommunityDynamics.Measurement",href:"#MetacommunityDynamics.Measurement"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Measurement")],-1)),t[63]||(t[63]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[65]||(t[65]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Measurement</span></span></code></pre></div><p>The Measurement abstract type is a supertype for the different types of <em>measurements</em> a model describes, primarily [<code>Biomass</code>]: a continuous value representing relative amount of mass per species, [<code>Abundance</code>]: an integer valued count of individuals, and [<code>Occupancy</code>]: a binary value of whether is species is present at a location at a given time.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[64]||(t[64]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/types.jl#L23-L31",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",x,[s("summary",null,[t[66]||(t[66]=s("a",{id:"MetacommunityDynamics.Model",href:"#MetacommunityDynamics.Model"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Model")],-1)),t[67]||(t[67]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[69]||(t[69]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Model{SC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Measurement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,SP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Spatialness</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Discreteness</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The abstract type from all models in MetacommunityDynamics. All <code>Model</code>&#39;s are parametric types that stores four parameters that describe the model: [<code>Scale</code>], [<code>Measurement</code>], [<code>Spatialness</code>], and [<code>Discreteness</code>].</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[68]||(t[68]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/model.jl#L1-L7",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",w,[s("summary",null,[t[70]||(t[70]=s("a",{id:"MetacommunityDynamics.Parameter",href:"#MetacommunityDynamics.Parameter"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Parameter")],-1)),t[71]||(t[71]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[73]||(t[73]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Parameter{T,N}</span></span></code></pre></div><p>Yet-another Parameter struct.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[72]||(t[72]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/parameters.jl#L3-L7",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",A,[s("summary",null,[t[74]||(t[74]=s("a",{id:"MetacommunityDynamics.Population",href:"#MetacommunityDynamics.Population"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Population")],-1)),t[75]||(t[75]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[77]||(t[77]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Population</span></span></code></pre></div><p>The population scale refers to models that describe the population dynamics of a single species at a single local location.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[76]||(t[76]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/types.jl#L12-L17",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",F,[s("summary",null,[t[78]||(t[78]=s("a",{id:"MetacommunityDynamics.RickerModel",href:"#MetacommunityDynamics.RickerModel"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.RickerModel")],-1)),t[79]||(t[79]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[81]||(t[81]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RickerModel</span></span></code></pre></div>',1)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[80]||(t[80]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/models/ricker.jl#L14-L18",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",S,[s("summary",null,[t[82]||(t[82]=s("a",{id:"MetacommunityDynamics.RickerStochasticityType",href:"#MetacommunityDynamics.RickerStochasticityType"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.RickerStochasticityType")],-1)),t[83]||(t[83]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[85]||(t[85]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RickerStochasticityType</span></span></code></pre></div>',1)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[84]||(t[84]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/models/ricker.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",V,[s("summary",null,[t[86]||(t[86]=s("a",{id:"MetacommunityDynamics.RosenzweigMacArthur",href:"#MetacommunityDynamics.RosenzweigMacArthur"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.RosenzweigMacArthur")],-1)),t[87]||(t[87]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[93]||(t[93]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RosenzweigMacArthur{S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Spatialness</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Model{Community,Biomass,S,Continuous}</span></span></code></pre></div><p>Dynamics given by</p>',2)),s("p",null,[s("mjx-container",B,[(r(),o("svg",P,t[88]||(t[88]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mrow" transform="translate(360.7,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g></g><rect width="1104.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1622.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2677.9,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3260.9,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4019.9,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mn" transform="translate(4755.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(5478.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mfrac" transform="translate(6478.4,0)"><g data-mml-node="mi" transform="translate(266,394) scale(0.707)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z" style="stroke-width:3;"></path></g><rect width="828.6" height="60" x="120" y="220"></rect></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7547,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(8505.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mfrac" transform="translate(9505.5,0)"><g data-mml-node="mrow" transform="translate(578.9,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(640,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1400,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1278,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1918,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2415,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g></g><rect width="2444.4" height="60" x="120" y="220"></rect></g></g></g>',1)]))),t[89]||(t[89]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mfrac",null,[s("mrow",null,[s("mi",null,"d"),s("mi",null,"R")]),s("mrow",null,[s("mi",null,"d"),s("mi",null,"t")])]),s("mo",null,"="),s("mi",null,"Î»"),s("mi",null,"R"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",{minsize:"2.047em",maxsize:"2.047em"},"(")]),s("mn",null,"1"),s("mo",null,"âˆ’"),s("mfrac",null,[s("mi",null,"R"),s("mi",null,"K")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",{minsize:"2.047em",maxsize:"2.047em"},")")]),s("mo",null,"âˆ’"),s("mfrac",null,[s("mrow",null,[s("mi",null,"Î±"),s("mi",null,"C"),s("mi",null,"R")]),s("mrow",null,[s("mn",null,"1"),s("mo",null,"+"),s("mi",null,"Î±"),s("mi",null,"Î·"),s("mi",null,"R")])])])],-1))])]),s("p",null,[s("mjx-container",Z,[(r(),o("svg",I,t[90]||(t[90]=[i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mrow" transform="translate(361.1,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g></g><rect width="1105.1" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1622.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2678.7,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z" style="stroke-width:3;"></path></g><g data-mml-node="mfrac" transform="translate(3244.7,0)"><g data-mml-node="mrow" transform="translate(578.9,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(640,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1400,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1278,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1918,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2415,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g></g><rect width="2444.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6151.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7151.5,0)"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7694.5,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[91]||(t[91]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mfrac",null,[s("mrow",null,[s("mi",null,"d"),s("mi",null,"C")]),s("mrow",null,[s("mi",null,"d"),s("mi",null,"t")])]),s("mo",null,"="),s("mi",null,"Î²"),s("mfrac",null,[s("mrow",null,[s("mi",null,"Î±"),s("mi",null,"C"),s("mi",null,"R")]),s("mrow",null,[s("mn",null,"1"),s("mo",null,"+"),s("mi",null,"Î±"),s("mi",null,"Î·"),s("mi",null,"R")])]),s("mo",null,"âˆ’"),s("mi",null,"Î³"),s("mi",null,"C")])],-1))])]),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[92]||(t[92]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/models/rosenzweigmacarthur.jl#L1-L11",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",R,[s("summary",null,[t[94]||(t[94]=s("a",{id:"MetacommunityDynamics.Scale",href:"#MetacommunityDynamics.Scale"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Scale")],-1)),t[95]||(t[95]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[97]||(t[97]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Scale</span></span></code></pre></div><p>Abstract type that is a supertype for all model scales: [<code>Population</code>], [<code>Metapopulation</code>], [<code>Community</code>], and [<code>Metacommunity</code>]. A model&#39;s scale is what it was <em>orginally</em> defined as. For example, [<code>TrophicLotkaVolterra</code>] is a [<code>Community</code>] model, regardless of whether is has been convert to run on a spatial-graph via [<code>spatialize</code>].</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[96]||(t[96]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/types.jl#L1-L9",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",N,[s("summary",null,[t[98]||(t[98]=s("a",{id:"MetacommunityDynamics.SpeciesPool",href:"#MetacommunityDynamics.SpeciesPool"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.SpeciesPool")],-1)),t[99]||(t[99]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[101]||(t[101]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SpeciesPool{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>A <code>SpeciesPool</code> consists of a set of species and their corresponding traits.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[100]||(t[100]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/species.jl#L2-L6",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",O,[s("summary",null,[t[102]||(t[102]=s("a",{id:"MetacommunityDynamics.Trajectory",href:"#MetacommunityDynamics.Trajectory"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.Trajectory")],-1)),t[103]||(t[103]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[105]||(t[105]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Trajectory{S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SciMLBase.AbstractTimeseriesSolution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>A trajectory is a single output for a <code>Problem</code>.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[104]||(t[104]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/trajectory.jl#L2-L6",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",z,[s("summary",null,[t[106]||(t[106]=s("a",{id:"Base.size-Tuple{Coordinates}",href:"#Base.size-Tuple{Coordinates}"},[s("span",{class:"jlbinding"},"Base.size")],-1)),t[107]||(t[107]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[109]||(t[109]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coords</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the number of nodes in a coordinate set <code>coords</code>.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[108]||(t[108]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L14-L18",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",U,[s("summary",null,[t[110]||(t[110]=s("a",{id:"MetacommunityDynamics._env_from_layer-Tuple{Any, EnvironmentLayer}",href:"#MetacommunityDynamics._env_from_layer-Tuple{Any, EnvironmentLayer}"},[s("span",{class:"jlbinding"},"MetacommunityDynamics._env_from_layer")],-1)),t[111]||(t[111]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[113]||(t[113]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_env_from_layer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coords, layer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EnvironmentLayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the values in the layer at the given coordinates, given the bounding-box os the coordinates is the extent of the layer.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[112]||(t[112]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L71-L76",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",G,[s("summary",null,[t[114]||(t[114]=s("a",{id:"MetacommunityDynamics.distance_matrix-Tuple{Coordinates}",href:"#MetacommunityDynamics.distance_matrix-Tuple{Coordinates}"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.distance_matrix")],-1)),t[115]||(t[115]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[117]||(t[117]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">distance_matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coords</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; distance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Euclidean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Returns a matrix of pairwise distances for all nodes in a <code>Coordinates</code>. The argument passed to <code>distance</code> must be of type <code>Distance</code> from <code>Distances.jl</code>.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[116]||(t[116]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L49-L53",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",J,[s("summary",null,[t[118]||(t[118]=s("a",{id:"MetacommunityDynamics.envdims-Tuple{Coordinates}",href:"#MetacommunityDynamics.envdims-Tuple{Coordinates}"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.envdims")],-1)),t[119]||(t[119]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[121]||(t[121]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">envdims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coords</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the dimensionality of the environmental variable associated with each node in a <code>Coordinates</code> coords.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[120]||(t[120]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L22-L27",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",$,[s("summary",null,[t[122]||(t[122]=s("a",{id:"MetacommunityDynamics.environment-Tuple{Coordinates}",href:"#MetacommunityDynamics.environment-Tuple{Coordinates}"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.environment")],-1)),t[123]||(t[123]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[125]||(t[125]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coords</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the dictionary of environmental variables of a <code>Coordinates</code> <code>coords</code></p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[124]||(t[124]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L37-L41",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",X,[s("summary",null,[t[126]||(t[126]=s("a",{id:"MetacommunityDynamics.numsites-Tuple{Coordinates}",href:"#MetacommunityDynamics.numsites-Tuple{Coordinates}"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.numsites")],-1)),t[127]||(t[127]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[129]||(t[129]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">numsites</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coords</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the number of nodes in a <code>Coordinates</code> <code>coords</code>.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[128]||(t[128]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/coordinates.jl#L30-L34",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),s("details",K,[s("summary",null,[t[130]||(t[130]=s("a",{id:"MetacommunityDynamics.âˆ‚u-Tuple{BevertonHolt, Any, Any}",href:"#MetacommunityDynamics.âˆ‚u-Tuple{BevertonHolt, Any, Any}"},[s("span",{class:"jlbinding"},"MetacommunityDynamics.âˆ‚u")],-1)),t[131]||(t[131]=n()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[133]||(t[133]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">âˆ‚u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BevertonHolt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x)</span></span></code></pre></div><p>Single time-step for the <code>BevertonHolt</code> model.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[132]||(t[132]=[s("a",{href:"https://github.com/gottacatchenall/MetacommunityDynamics.jl/blob/85d01fb1811851a1cb1ead5a75b2a3a45ec8a1d8/src/models/bevertonholt.jl#L22-L26",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})])])}const n2=d(p,[["render",Y]]);export{i2 as __pageData,n2 as default};
