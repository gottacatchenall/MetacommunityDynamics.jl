import{_ as i,c as a,o,aA as t}from"./chunks/framework.Ce1246Qc.js";const u=JSON.parse('{"title":"Public methods","description":"","frontmatter":{},"headers":[],"relativePath":"reference/public.md","filePath":"reference/public.md","lastUpdated":null}'),c={name:"reference/public.md"};function n(m,e,y,r,s,l){return o(),a("div",null,e[0]||(e[0]=[t('<h1 id="Public-methods" tabindex="-1">Public methods <a class="header-anchor" href="#Public-methods" aria-label="Permalink to &quot;Public methods {#Public-methods}&quot;">​</a></h1><ul><li><a href="#MetacommunityDynamics.BevertonHolt"><code>MetacommunityDynamics.BevertonHolt</code></a></li><li><a href="#MetacommunityDynamics.CompetitiveLotkaVolterra"><code>MetacommunityDynamics.CompetitiveLotkaVolterra</code></a></li><li><a href="#MetacommunityDynamics.Coordinates-Union{Tuple{Vector{T}}, Tuple{T}} where T&lt;:Tuple"><code>MetacommunityDynamics.Coordinates</code></a></li><li><a href="#MetacommunityDynamics.Coordinates-Tuple{}"><code>MetacommunityDynamics.Coordinates</code></a></li><li><a href="#MetacommunityDynamics.Coordinates-Union{Tuple{Dict{S, Vector{T}}}, Tuple{T}, Tuple{S}} where {S&lt;:Union{String, Symbol}, T}"><code>MetacommunityDynamics.Coordinates</code></a></li><li><a href="#MetacommunityDynamics.Coordinates-Union{Tuple{Vector{E}}, Tuple{E}} where E&lt;:EnvironmentLayer"><code>MetacommunityDynamics.Coordinates</code></a></li><li><a href="#MetacommunityDynamics.Coordinates"><code>MetacommunityDynamics.Coordinates</code></a></li><li><a href="#MetacommunityDynamics.Coordinates-Tuple{Integer}"><code>MetacommunityDynamics.Coordinates</code></a></li><li><a href="#MetacommunityDynamics.Coordinates-Tuple{E} where E&lt;:EnvironmentLayer"><code>MetacommunityDynamics.Coordinates</code></a></li><li><a href="#MetacommunityDynamics.Discreteness"><code>MetacommunityDynamics.Discreteness</code></a></li><li><a href="#MetacommunityDynamics.EnvironmentLayer-Tuple{}"><code>MetacommunityDynamics.EnvironmentLayer</code></a></li><li><a href="#MetacommunityDynamics.EnvironmentLayer"><code>MetacommunityDynamics.EnvironmentLayer</code></a></li><li><a href="#MetacommunityDynamics.LogisticMap"><code>MetacommunityDynamics.LogisticMap</code></a></li><li><a href="#MetacommunityDynamics.LogisticModel"><code>MetacommunityDynamics.LogisticModel</code></a></li><li><a href="#MetacommunityDynamics.Measurement"><code>MetacommunityDynamics.Measurement</code></a></li><li><a href="#MetacommunityDynamics.Model"><code>MetacommunityDynamics.Model</code></a></li><li><a href="#MetacommunityDynamics.Parameter"><code>MetacommunityDynamics.Parameter</code></a></li><li><a href="#MetacommunityDynamics.Population"><code>MetacommunityDynamics.Population</code></a></li><li><a href="#MetacommunityDynamics.RickerModel"><code>MetacommunityDynamics.RickerModel</code></a></li><li><a href="#MetacommunityDynamics.RickerStochasticityType"><code>MetacommunityDynamics.RickerStochasticityType</code></a></li><li><a href="#MetacommunityDynamics.RosenzweigMacArthur"><code>MetacommunityDynamics.RosenzweigMacArthur</code></a></li><li><a href="#MetacommunityDynamics.Scale"><code>MetacommunityDynamics.Scale</code></a></li><li><a href="#MetacommunityDynamics.SpeciesPool"><code>MetacommunityDynamics.SpeciesPool</code></a></li><li><a href="#MetacommunityDynamics.Trajectory"><code>MetacommunityDynamics.Trajectory</code></a></li><li><a href="#Base.size-Tuple{Coordinates}"><code>Base.size</code></a></li><li><a href="#MetacommunityDynamics._env_from_layer-Tuple{Any, EnvironmentLayer}"><code>MetacommunityDynamics._env_from_layer</code></a></li><li><a href="#MetacommunityDynamics.distance_matrix-Tuple{Coordinates}"><code>MetacommunityDynamics.distance_matrix</code></a></li><li><a href="#MetacommunityDynamics.envdims-Tuple{Coordinates}"><code>MetacommunityDynamics.envdims</code></a></li><li><a href="#MetacommunityDynamics.environment-Tuple{Coordinates}"><code>MetacommunityDynamics.environment</code></a></li><li><a href="#MetacommunityDynamics.numsites-Tuple{Coordinates}"><code>MetacommunityDynamics.numsites</code></a></li><li><a href="#MetacommunityDynamics.∂u-Tuple{BevertonHolt, Any, Any}"><code>MetacommunityDynamics.∂u</code></a></li></ul>',2)]))}const M=i(c,[["render",n]]);export{u as __pageData,M as default};
